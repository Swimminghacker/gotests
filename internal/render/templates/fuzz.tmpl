{{define "assertion" -}}
tt.assertion(t, {{if .OnlyReturnsError}}{{template "call" .}}{{else}}err{{end}}
{{- if or (not .Subtests) .PrintInputs -}}
    , fmt.Sprintf("{{template "message" .}}", {{template "inputs" .}})
{{- end -}}
)
{{- end}}


{{define "equal"}}assert.Equal{{if or (not .Subtests) .PrintInputs}}f{{end}}{{end}}


{{define "msg"}}{{if or (not .Subtests) .PrintInputs}} , "{{template "message" .}}", {{template "inputs" .}}{{end}}{{end}}


{{define "function"}}
{{- $f := .}}

func Fuzz_{{.TestName}}(f *testing.F) {
    f.Fuzz(func(testingT *testing.T,
    	{{- if .TestParameters}}
    		{{- range .TestParameters}}{{Param .}} {{.Type}},{{- end}}
    	{{- end}}) {
        {{- with .Receiver}}
        	{{- if .IsStruct}}
        		{{Receiver .}} := {{if .Type.IsStar}}&{{end}}{{.Type.Value}}{}
        	    {{- end}}
        	{{- end}}
        	{{- range .Parameters}}
        		{{- if .IsWriter}}
        		    {{Param .}} := &bytes.Buffer{}
                {{- end}}
            {{- end}}
    	{{template "call" $f}}
    })
}

{{end}}
